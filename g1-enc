<!DOCTYPE html>
<html>
<head>
    <title>Text Encrypt/Decrypt</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
        }
        textarea {
            width: 100%;
            height: 100px;
            margin: 10px 0;
        }
        button {
            padding: 10px 20px;
            margin: 5px;
        }
        #output {
            white-space: pre-wrap;
            margin: 10px 0;
        }
        .explanation {
            margin-top: 40px;
            padding: 20px;
            background-color: #f5f5f5;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>Text Encrypt/Decrypt Tool</h1>
    
    <h3>1. Enter your password:</h3>
    <input type="password" id="password" placeholder="Enter your password">
    
    <h3>2. Enter text to encrypt/decrypt:</h3>
    <textarea id="inputText" placeholder="Enter your text here"></textarea>
    
    <button onclick="encryptText()">Encrypt</button>
    <button onclick="decryptText()">Decrypt</button>
    
    <h3>Result:</h3>
    <div id="output"></div>

    <div class="explanation">
        <h2>How This Application Works</h2>
        <p>This is a client-side encryption/decryption tool that runs entirely in your browser using the Web Crypto API. Here's a detailed breakdown:</p>
        
        <h3>Key Components:</h3>
        <ul>
            <li><strong>Web Crypto API:</strong> Uses the browser's built-in cryptographic functions (crypto.subtle) for secure operations.</li>
            <li><strong>AES-GCM:</strong> Advanced Encryption Standard in Galois/Counter Mode, providing both encryption and authentication.</li>
            <li><strong>PBKDF2:</strong> Password-Based Key Derivation Function 2, used to create a secure encryption key from your password.</li>
        </ul>

        <h3>Encryption Process:</h3>
        <ol>
            <li>Takes your password and uses PBKDF2 with 100,000 iterations and SHA-256 hashing to derive a 256-bit encryption key.</li>
            <li>Generates a random 12-byte Initialization Vector (IV) for each encryption.</li>
            <li>Converts your input text to an ArrayBuffer (binary format).</li>
            <li>Encrypts the text using AES-GCM with the derived key and IV.</li>
            <li>Converts both IV and encrypted data to Base64 and combines them with a colon separator (iv:encrypted).</li>
        </ol>

        <h3>Decryption Process:</h3>
        <ol>
            <li>Splits the input at the colon to separate IV and encrypted data.</li>
            <li>Converts both parts back from Base64 to binary format.</li>
            <li>Derives the same encryption key from your password using PBKDF2.</li>
            <li>Decrypts the data using AES-GCM with the key and IV.</li>
            <li>Converts the decrypted binary data back to readable text.</li>
        </ol>

        <h3>Security Features:</h3>
        <ul>
            <li>Uses a strong encryption algorithm (AES-256-GCM) with authentication.</li>
            <li>Derives keys securely from passwords using PBKDF2.</li>
            <li>Uses a unique IV for each encryption to prevent pattern analysis.</li>
            <li>Runs entirely client-side - no data is sent to any server.</li>
            <li>Uses a fixed salt ("salt") for PBKDF2 - sufficient for this single-user application.</li>
        </ul>

        <h3>Usage Notes:</h3>
        <ul>
            <li>The same password must be used for encryption and decryption.</li>
            <li>Security depends heavily on using a strong, unique password.</li>
            <li>The output format is "iv:encrypted_data" (both Base64-encoded).</li>
            <li>Works in modern browsers supporting the Web Crypto API (Chrome, Firefox, Edge, Safari).</li>
        </ul>

        <h3>Limitations:</h3>
        <ul>
            <li>Password strength determines overall security - weak passwords can be brute-forced.</li>
            <li>Uses a fixed salt for simplicity - for production use, a random salt per encryption would be better.</li>
            <li>No key persistence - you must remember your password.</li>
        </ul>

        <p>This tool is suitable for basic secure text encryption/decryption where you control both ends of the process and can securely share the password.</p>
        
        <p>Made with Grok 3 beta</p>
        
    </div>

    <script>
        // Convert string to ArrayBuffer
        function strToArrayBuffer(str) {
            return new TextEncoder().encode(str);
        }

        // Convert ArrayBuffer to string
        function arrayBufferToStr(buffer) {
            return new TextDecoder().decode(buffer);
        }

        // Convert ArrayBuffer to Base64
        function arrayBufferToBase64(buffer) {
            return btoa(String.fromCharCode(...new Uint8Array(buffer)));
        }

        // Convert Base64 to ArrayBuffer
        function base64ToArrayBuffer(base64) {
            const binary = atob(base64);
            const buffer = new Uint8Array(binary.length);
            for (let i = 0; i < binary.length; i++) {
                buffer[i] = binary.charCodeAt(i);
            }
            return buffer;
        }

        // Generate key from password
        async function generateKey(password) {
            const encoder = new TextEncoder();
            const keyMaterial = await crypto.subtle.importKey(
                "raw",
                encoder.encode(password),
                { name: "PBKDF2" },
                false,
                ["deriveKey"]
            );
            
            return crypto.subtle.deriveKey(
                {
                    name: "PBKDF2",
                    salt: encoder.encode("salt"),
                    iterations: 100000,
                    hash: "SHA-256"
                },
                keyMaterial,
                { name: "AES-GCM", length: 256 },
                false,
                ["encrypt", "decrypt"]
            );
        }

        // Encrypt function
        async function encryptText() {
            try {
                const password = document.getElementById("password").value;
                const inputText = document.getElementById("inputText").value;
                const output = document.getElementById("output");

                if (!password || !inputText) {
                    output.textContent = "Please enter both password and text";
                    return;
                }

                const key = await generateKey(password);
                const iv = crypto.getRandomValues(new Uint8Array(12));
                const encrypted = await crypto.subtle.encrypt(
                    {
                        name: "AES-GCM",
                        iv: iv
                    },
                    key,
                    strToArrayBuffer(inputText)
                );

                const ivBase64 = arrayBufferToBase64(iv);
                const encryptedBase64 = arrayBufferToBase64(encrypted);
                output.textContent = `${ivBase64}:${encryptedBase64}`;
            } catch (error) {
                document.getElementById("output").textContent = 
                    "Encryption error: " + error.message;
            }
        }

        // Decrypt function
        async function decryptText() {
            try {
                const password = document.getElementById("password").value;
                const inputText = document.getElementById("inputText").value;
                const output = document.getElementById("output");

                if (!password || !inputText) {
                    output.textContent = "Please enter both password and text";
                    return;
                }

                const [ivBase64, encryptedBase64] = inputText.split(":");
                if (!ivBase64 || !encryptedBase64) {
                    output.textContent = "Invalid encrypted format. Use encrypt first.";
                    return;
                }

                const key = await generateKey(password);
                const iv = base64ToArrayBuffer(ivBase64);
                const encrypted = base64ToArrayBuffer(encryptedBase64);

                const decrypted = await crypto.subtle.decrypt(
                    {
                        name: "AES-GCM",
                        iv: iv
                    },
                    key,
                    encrypted
                );

                output.textContent = arrayBufferToStr(decrypted);
            } catch (error) {
                document.getElementById("output").textContent = 
                    "Decryption error: " + error.message;
            }
        }
    </script>
</body>
</html>
